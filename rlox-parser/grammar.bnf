program        -> declaration* EOF;

declaration    -> varDecl
                | statement
                ;

statement      -> exprStmt
                | forStmt
                | ifStmt
                | printStmt
                | whileStmt
                | block
                ;

varDecl        -> "var" IDENTIFIER ( "=" expression )? ";";
exprStmt       -> expression ";";
ifStmt         -> "if" "(" expression ")" statement ( "else" statement )?;
forStmt        -> "for" "(" ( varDecl | exprStmt | ";" ) expression? ";" expression? ")" statement;
printStmt      -> "print" expression ";";
whileStmt      -> "while" "(" expression ")" statement;
block          -> "{" declaration* "}";

expression     -> assignment;
assignment     -> IDENTIFIER "=" assignment
                | logic_or
                ;
logic_or       -> logic_and ( "or" logic_and )*;
logic_and      -> equality ( "and" equality )*;
equality       -> comparison ( ( "!=" | "==" ) comparison )*;
comparison     -> addition ( ( ">" | ">=" | "<" | "<=" ) addition )*;
addition       -> multiplication ( ( "-" | "+" ) multiplication )*;
multiplication -> unary ( ( "/" | "*" ) unary )*;
unary          -> ( "!" | "-" ) unary
                | call
                ;
call           -> primary ( "(" arguments? ")" )*;
arguments      -> expression ( "," expression )*;
primary        -> NUMBER
                | STRING
                | "false"
                | "true"
                | "nil"
                | "(" expression ")"
                | IDENTIFIER
                ;